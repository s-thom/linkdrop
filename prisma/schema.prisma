datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password      Password?
  totp          Totp?
  links         Link[]
  tags          Tag[]
  linkAnalytics LinkAnalytics[]

  createdInvites UserInvite[] @relation("UserCreatedInvites")
  invitedInvite  UserInvite?  @relation("UserInviteeInvites")

  isAdmin Boolean @default(false)
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Totp {
  secret String
  active Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Link {
  id String @id @default(cuid())

  url         String
  description String
  tags        Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  analytics   LinkAnalytics?
  analyticsId String?

  @@index([userId])
  @@index([url, userId])
}

model Tag {
  id String @id @default(cuid())

  name String

  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  links Link[]

  @@unique([name, userId])
  @@index([name, userId])
}

model LinkAnalytics {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  linkId String @unique

  clicks Int

  @@index([linkId, userId])
  @@index([clicks, userId])
}

model UserInvite {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator       User?   @relation("UserCreatedInvites", fields: [creatorUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorUserId String?

  invitee       User?   @relation("UserInviteeInvites", fields: [inviteeUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inviteeUserId String? @unique

  @@index([creatorUserId])
  @@index([inviteeUserId])
}
